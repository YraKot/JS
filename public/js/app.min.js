;(function(){
	'use strict';
	
	function playSound(e){
		const audio = document.querySelector(`audio[data-key='${e.keyCode}']`);
		const key = document.querySelector(`.key[data-key='${e.keyCode}']`);
		
		if(!audio) return;
		
		audio.currentTime = 0;
		audio.play();
		
		key.classList.add('playing');
	}
	
	function removeTransition(e) {
		
		if( e.propertyName !== 'transform' ) return;
		this .classList.remove('playing');
		
	}
	
	const keys = document.querySelectorAll('.key');
	
	keys.forEach( key => key.addEventListener('transitionend', removeTransition ));
	
	window.addEventListener('keydown', playSound);
		
}());

;(function(){
	'use strick';

	const handHour = document.querySelector('.hour-hand');
	const handMin = document.querySelector('.min-hand');
	const handSecond = document.querySelector('.second-hand');
	
	function setTime() {

		const now = new Date();
	
		const H = now.getHours(),
			  M = now.getMinutes(),
			  S = now.getSeconds();

		const secDegrees = (( S / 60 ) * 360) + 90;
		handSecond.style.transform = `rotate(${secDegrees}deg)`;

		const minDegrees = (( M / 60 ) * 360) + 90;
		handMin.style.transform = `rotate(${minDegrees}deg)`;
		
		const hourDegrees = (( H / 12 ) * 360) + 90;
		handHour.style.transform = `rotate(${hourDegrees}deg)`;

		[handHour, handMin, handSecond].forEach(el => el.style.transition = (S === 0) ? 'none' : null );
		// console.log(h);
		// console.log(m);
		// console.log(secDegrees);
	}

	setInterval( setTime, 1000);

	// setTime();

}());

 ;(function(){
	const inputs = document.querySelectorAll('.controls input');

	function handelUpdate() {
		const suffix = this.dataset.sizing || '';
		document.documentElement.style.setProperty(`--${this.name}`, this.value + suffix );
		 console.log(this.name)
	}

	inputs.forEach(input => input.addEventListener('change', handelUpdate));
	inputs.forEach(input => input.addEventListener('mousemove', handelUpdate));

 }());

;(function(){
	'use strick';
	
	// ## Array Cardio Day 1
	const inventors = [
		{ first: 'Albert', last: 'Einstein', year: 1879, passed: 1955 },
		{ first: 'Isaac', last: 'Newton', year: 1643, passed: 1727 },
		{ first: 'Galileo', last: 'Galilei', year: 1564, passed: 1642 },
		{ first: 'Marie', last: 'Curie', year: 1867, passed: 1934 },
		{ first: 'Johannes', last: 'Kepler', year: 1571, passed: 1630 },
		{ first: 'Nicolaus', last: 'Copernicus', year: 1473, passed: 1543 },
		{ first: 'Max', last: 'Planck', year: 1858, passed: 1947 },
		{ first: 'Katherine', last: 'Blodgett', year: 1898, passed: 1979 },
		{ first: 'Ada', last: 'Lovelace', year: 1815, passed: 1852 },
		{ first: 'Sarah E.', last: 'Goode', year: 1855, passed: 1905 },
		{ first: 'Lise', last: 'Meitner', year: 1878, passed: 1968 },
		{ first: 'Hanna', last: 'HammarstrÃ¶m', year: 1829, passed: 1909 }
	];

	const people = ['Beck, Glenn', 'Becker, Carl', 'Beckett, Samuel', 'Beddoes, Mick', 'Beecher, Henry', 'Beethoven, Ludwig', 'Begin, Menachem', 'Belloc, Hilaire', 'Bellow, Saul', 'Benchley, Robert', 'Benenson, Peter', 'Ben-Gurion, David', 'Benjamin, Walter', 'Benn, Tony', 'Bennington, Chester', 'Benson, Leana', 'Bent, Silas', 'Bentsen, Lloyd', 'Berger, Ric', 'Bergman, Ingmar', 'Berio, Luciano', 'Berle, Milton', 'Berlin, Irving', 'Berne, Eric', 'Bernhard, Sandra', 'Berra, Yogi', 'Berry, Halle', 'Berry, Wendell', 'Bethea, Erin', 'Bevan, Aneurin', 'Bevel, Ken', 'Biden, Joseph', 'Bierce, Ambrose', 'Biko, Steve', 'Billings, Josh', 'Biondo, Frank', 'Birrell, Augustine', 'Black, Elk', 'Blair, Robert', 'Blair, Tony', 'Blake, William'];
	
	// Array.prototype.filter()
	// 1. Filter the list of inventors for those who were born in the 1500's
	
	// const fifteen = inventors.filter( function(inventor) {
	// 	if( inventor.year >= 1500 && inventor.year <= 1599 ) {
	// 		return true; // keep it
	// 	}
	// }); 
	const fifteen = inventors.filter( inventor => (inventor.year >= 1500 && inventor.year <= 1599 )); 
	console.table( fifteen );
 


    // Array.prototype.map()
	// 2. Give us an array of the inventors' first and last names
	
	const fullNames = inventors.map( inventor => `${inventor.first} ${inventor.last}`);
	console.log(fullNames);

    // Array.prototype.sort()
	// 3. Sort the inventors by birthdate, oldest to youngest
	
	// const ordered = inventors.sort( function(a,b){
	// 	if(a.year > b.year) { return 1;}
	// 	else { return -1;}
	// });
	const ordered = inventors.sort( (a,b) => a.year > b.year ? 1 : -1 )
	console.table (ordered);

    // Array.prototype.reduce()
	// 4. How many years did all the inventors live?
	
	const totalYears = inventors.reduce( (total, inventor) => {
		return total + (inventor.passed - inventor.year);
	}, 0);
	console.log(totalYears);

	// 5. Sort the inventors by years lived
	
	const oldest = inventors.sort( (a,b) => {
		const lastGuy = a.passed - a.year;
		const nextGuy = b.passed - b.year;
		return lastGuy > nextGuy ? -1 : 1;
	});
	console.table(oldest);

    // 6. create a list of Boulevards in Paris that contain 'de' anywhere in the name
	// only for https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris

	// const category = document.querySelector('.mw-category');
	// const links = Array.from(category.querySelectorAll('a'));
	// const de = links
	// 		.map( link => link.textContent)
	// 		.filter(  streetName => streetName.includes( 'de'));

    // 7. sort Exercise
	// Sort the people alphabetically by last name
	
	const alpha = people.sort( (lastOne, nextOne) => {
		const [aLast, aFirst] = lastOne.split(', ');
		const [bLast, bFirst] = nextOne.split(', ');
		return aLast > bLast ? 1 : -1;
	});
	console.log(alpha);

    // 8. Reduce Exercise
    // Sum up the instances of each of these
	
	const data = ['car', 'car', 'truck', 'truck', 'bike', 'walk', 'car', 'van', 'bike', 'walk', 'car', 'van', 'car', 'truck' ];

	const transportation = data.reduce( function(obj, item){
		if( !obj[item]) {
			obj[item] = 0;
		}
		obj[item]++;
		return obj; 
	}, {});
	console.log(transportation);

}());

;(function(){
	'use strick';

	const panels = document.querySelectorAll('.panel');
	
	
	function toggleOpen() {
		this.classList.toggle('open');
	};
	
	function toggleActive(e) {
		if( e.propertyName.includes('flex-grow') ) {
			this.classList.toggle('open-active');
		}
	};
	
	panels.forEach( panel => panel.addEventListener('click', toggleOpen));
	panels.forEach( panel => panel.addEventListener('transitionend', toggleActive));

}());

//# sourceMappingURL=data:application/json;charset=utf8;base64,
